name: Test and deploy workflow

on:
  push:
  pull_request:

jobs:
  quality:
    runs-on: ubuntu-latest

    steps:
      - name: Clone repo
        uses: actions/checkout@v2
      - name: Setup Python
        uses: actions/setup-python@v2
        with:
          python-version: '3.9'
      - uses: actions/cache@v2
        with:
          path: ~/.cache/pip
          key: ${{ runner.os }}-pip-3.9
          restore-keys: ${{ runner.os }}-pip-3.9
      #----------------------------------------------
      #  -----  install & configure poetry  -----
      #----------------------------------------------
      - name: Install Poetry
        uses: snok/install-poetry@v1
        with:
          virtualenvs-create: true
          virtualenvs-in-project: true
      #----------------------------------------------
      #       load cached venv if cache exists
      #----------------------------------------------
      - name: Load cached venv
        id: cached-poetry-dependencies
        uses: actions/cache@v2
        with:
          path: .venv
          key: venv-${{ runner.os }}-${{ hashFiles('**/poetry.lock') }}-3.9
      #----------------------------------------------
      # install dependencies if cache does not exist
      #----------------------------------------------
      - name: Install dependencies
        if: steps.cached-poetry-dependencies.outputs.cache-hit != 'true'
        run: poetry install --no-interaction --no-root
      #----------------------------------------------
      # install your root project, if required
      #----------------------------------------------
      - name: Install library
        run: poetry install --no-interaction

      #----------------------------------------------
      #       run python style checks
      #----------------------------------------------
      - name: isort
        run: poetry run isort snakebids -c
      - name: Black
        run: poetry run black snakebids --check
      - name: Flake8
        run: poetry run flake8 snakebids
      - name: pylint
        run: poetry run pylint snakebids

      - name: Check __init__ files with mkinit
        # Cryptic code to check if check_mkinit returns only whitespace.
        # If it does, the check passes. Adapted from
        # https://stackoverflow.com/questions/9767644/test-if-string-has-non-whitespace-characters-in-bash
        run: "[[ $(poetry run poe -q check_mkinit ) != *[![:space:]]* ]] || (echo 'Run poetry run poe mkinit to correct __init__ files' && exit 1)"
